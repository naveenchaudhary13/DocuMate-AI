from django.db import models
from pgvector.django import VectorField
from django.contrib.auth import get_user_model

User = get_user_model()


class Profile(models.Model):
    """
    Represents the profile model for DocuMate.
    
    Attributes:
        user (User): The user associated with the profile.
        email (str): The email address of the user.
        username (str): The username of the user.
        first_name (str): The first name of the user.
        last_name (str): The last name of the user.
        ip_address (str): The IP address of the user.
        city (str): The city of the user.
        region (str): The region of the user.
        country (str): The country of the user.
        continent (str): The continent of the user.
        zip_code (str): The zip code of the user.
        latitude (float): The latitude of the user.
        longitude (float): The longitude of the user.
        timezone (str): The timezone of the user.
        currency (str): The currency of the user.
        isp (str): The ISP of the user.
        org (str): The organization of the user.
        as_name (str): The AS name of the user.
        mobile (bool): Whether the user is a mobile user.
        proxy (bool): Whether the user is a proxy user.
        hosting (bool): Whether the user is a hosting user.
        user_agent (str): The user agent of the user.
        browser (str): The browser of the user.
        browser_version (str): The version of the browser of the user.
        os (str): The operating system of the user.
        os_version (str): The version of the operating system of the user.
        device_type (str): The type of device of the user.
        is_bot (bool): Whether the user is a bot.
        referer (str): The referrer of the user.
        language (str): The language of the user.
        total_input_tokens (int): The total input tokens used by the user.
        total_output_tokens (int): The total output tokens generated by the user.
        total_tokens (int): The total tokens used by the user.
        first_visited_at (datetime): The timestamp when the user first visited the website.
        last_visited_at (datetime): The timestamp when the user last visited the website.
    """
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    email = models.EmailField(blank=True, null=True)
    username = models.CharField(max_length=100, blank=True, null=True)
    first_name = models.CharField(max_length=100, blank=True, null=True)
    last_name = models.CharField(max_length=100, blank=True, null=True)
    ip_address = models.GenericIPAddressField(protocol='both')
    city = models.CharField(max_length=100, blank=True, null=True)
    region = models.CharField(max_length=100, blank=True, null=True)
    country = models.CharField(max_length=100, blank=True, null=True)
    continent = models.CharField(max_length=100, blank=True, null=True)
    zip_code = models.CharField(max_length=20, blank=True, null=True)
    latitude = models.FloatField(blank=True, null=True)
    longitude = models.FloatField(blank=True, null=True)
    timezone = models.CharField(max_length=100, blank=True, null=True)
    currency = models.CharField(max_length=10, blank=True, null=True)
    isp = models.CharField(max_length=200, blank=True, null=True)
    org = models.CharField(max_length=200, blank=True, null=True)
    as_name = models.CharField(max_length=200, blank=True, null=True)
    mobile = models.BooleanField(default=False)
    proxy = models.BooleanField(default=False)
    hosting = models.BooleanField(default=False)
    user_agent = models.TextField(blank=True, null=True)
    browser = models.CharField(max_length=100, blank=True, null=True)
    browser_version = models.CharField(max_length=50, blank=True, null=True)
    os = models.CharField(max_length=100, blank=True, null=True)
    os_version = models.CharField(max_length=50, blank=True, null=True)
    device_type = models.CharField(max_length=50, blank=True, null=True)
    is_bot = models.BooleanField(default=False)
    referer = models.TextField(blank=True, null=True)
    language = models.CharField(max_length=100, blank=True, null=True)
    total_input_tokens = models.PositiveIntegerField(default=0)
    total_output_tokens = models.PositiveIntegerField(default=0)
    total_tokens = models.PositiveIntegerField(default=0)
    first_visited_at = models.DateTimeField(auto_now_add=True)
    last_visited_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.pk} -> {self.ip_address}"


class Agent(models.Model):
    """
    Represents the ai agent model for DocuMate.
    
    Attributes:
        name (str): The name of the agent.
        api_key (str): The API key for the agent.
        total_input_tokens (int): The total number of input tokens processed by the agent.
        total_output_tokens (int): The total number of output tokens generated by the agent.
        total_tokens (int): The total number of tokens processed by the agent.
        model_name (str): The name of the model used by the agent.
        system_fingerprint (str): The system fingerprint of the agent.
        service_tier (str): The service tier of the agent.
        updated_at (datetime): The last updated timestamp for the agent.
    """
    name = models.CharField(max_length=100, default="DocuMate AI Agent")
    api_key = models.TextField(blank=True)
    total_input_tokens = models.PositiveIntegerField(default=0)
    total_output_tokens = models.PositiveIntegerField(default=0)
    total_tokens = models.PositiveIntegerField(default=0)
    model_name = models.CharField(max_length=255, blank=True)
    system_fingerprint = models.CharField(max_length=255, blank=True)
    service_tier = models.CharField(max_length=100, blank=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name
    
    
class Document(models.Model):
    """
    Represents a document uploaded by a user.
    
    Attributes:
        profile (ForeignKey): The profile associated with the document.
        file (FileField): The file uploaded by the user.
        name (str): The name of the document.
        file_type (str): The file type of the document.
        file_size (int): The size of the document in bytes.
        uploaded_at (datetime): The timestamp when the document was uploaded.
    """
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name="documents")
    file = models.FileField(upload_to='uploads/')
    name = models.CharField(max_length=255)
    file_type = models.CharField(max_length=50)
    file_size = models.PositiveIntegerField()
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name


class DocumentChunk(models.Model):
    """
    Represents a chunk of text extracted from a document.
    
    Attributes:
        document (ForeignKey): The document to which the chunk belongs.
        content (TextField): The content of the chunk.
        embedding (VectorField): The embedding of the chunk.
        chunk_index (PositiveIntegerField): The index of the chunk within the document.
        page_number (PositiveIntegerField): The page number of the chunk in the document.
    """
    document = models.ForeignKey(Document, on_delete=models.CASCADE, related_name="chunks")
    content = models.TextField()
    embedding = VectorField(dimensions=384)
    chunk_index = models.PositiveIntegerField()
    page_number = models.PositiveIntegerField(null=True, blank=True)

    def __str__(self):
        return f"{self.document.name} - Chunk {self.chunk_index}"


class Chat(models.Model):
    """
    Represents a conversation between a profile and the AI agent.
    
    Attributes:
        profile (ForeignKey): The profile associated with the chat.
        name (str): The name of the chat.
        created_at (datetime): The timestamp when the chat was created.
        updated_at (datetime): The timestamp when the chat was last updated.
    """
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='chats')
    name = models.CharField(max_length=255, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.profile.ip_address} - {self.name}"


class ChatMessage(models.Model):
    """
    Represents a message in a conversation.
    
    Attributes:
        chat (ForeignKey): The chat to which the message belongs.
        is_user (bool): Whether the message was sent by the user.
        content (TextField): The content of the message.
        created_at (datetime): The timestamp when the message was created.
    """
    chat = models.ForeignKey(Chat, on_delete=models.CASCADE, related_name='messages')
    is_user = models.BooleanField(default=True)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        speaker = "User" if self.is_user else "Bot"
        return f"[{speaker}] {self.chat.name} - {self.created_at.strftime('%Y-%m-%d %H:%M:%S')}"


class DocumentDeletionLog(models.Model):
    """
    Represents a log of deleted documents.
    
    Attributes:
        profile (ForeignKey): The profile associated with the deleted document.
        document_name (str): The name of the deleted document.
        file_path (str): The path of the deleted document.
        file_type (str): The file type of the deleted document.
        file_size (int): The size of the deleted document in bytes.
        deleted_at (datetime): The timestamp when the document was deleted.
    """
    profile = models.ForeignKey(Profile, on_delete=models.SET_NULL, null=True, blank=True)
    document_name = models.CharField(max_length=255)
    file_path = models.CharField(max_length=500)
    file_type = models.CharField(max_length=50)
    file_size = models.PositiveIntegerField()
    deleted_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.document_name} deleted at {self.deleted_at.strftime('%Y-%m-%d %H:%M')}"
